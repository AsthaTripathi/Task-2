SECTION A
```
#!/bin/bash

# Define the command version
VERSION="v0.1.0"

# Function to display command manual
display_manual() {
    echo "internsctl - Custom Linux Command"
    echo "Version: $VERSION"
    echo
    echo "DESCRIPTION:"
    echo "  This command is a custom Linux command created for specific operations."
    echo
    echo "OPTIONS:"
    echo "  --help      Display usage guidelines and examples."
    echo "  --version   Display the command version."
}

# Function to display command help
display_help() {
    echo "Usage: internsctl [OPTIONS]"
    echo
    echo "OPTIONS:"
    echo "  --help      Display usage guidelines and examples."
    echo "  --version   Display the command version."
}

# Main script logic
case "$1" in
    --help)
        display_help
        ;;
    --version)
        echo "internsctl $VERSION"
        ;;
    *)
        display_manual
        ;;
esac
```



SECTION B

```

#!/bin/bash

# Function to get CPU information
get_cpu_info() {
    lscpu
}

# Function to get memory information
get_memory_info() {
    free
}

# Function to create a new user
create_user() {
    if [ -z "$1" ]; then
        echo "Error: Username not provided."
        exit 1
    fi

    sudo useradd -m "$1"
    sudo passwd "$1"
}

# Function to list users
list_users() {
    if [ "$1" == "--sudo-only" ]; then
        getent passwd {1000..60000} | cut -d: -f1 | xargs groups | grep -E '\bsudo\b' | cut -d: -f1
    else
        getent passwd {1000..60000} | cut -d: -f1
    fi
}

# Function to get file information
get_file_info() {
    if [ -z "$1" ]; then
        echo "Error: File name not provided."
        exit 1
    fi

    file="$1"

    # Check if the file exists
    if [ ! -e "$file" ]; then
        echo "Error: File not found."
        exit 1
    fi

    size=$(stat -c %s "$file")
    permissions=$(stat -c %A "$file")
    owner=$(stat -c %U "$file")
    last_modified=$(stat -c %y "$file")

    echo "File: $file"
    echo "Access: $permissions"
    echo "Size(B): $size"
    echo "Owner: $owner"
    echo "Modify: $last_modified"
}

# Function to get specific file information
get_specific_file_info() {
    if [ -z "$1" ]; then
        echo "Error: File name not provided."
        exit 1
    fi

    file="$1"
    shift

    # Check if the file exists
    if [ ! -e "$file" ]; then
        echo "Error: File not found."
        exit 1
    fi

    while [ "$#" -gt 0 ]; do
        case "$1" in
            --size | -s)
                echo "$(stat -c %s "$file")"
                ;;
            --permissions | -p)
                echo "$(stat -c %A "$file")"
                ;;
            --owner | -o)
                echo "$(stat -c %U "$file")"
                ;;
            --last-modified | -m)
                echo "$(stat -c %y "$file")"
                ;;
            *)
                echo "Error: Invalid option - $1"
                exit 1
                ;;
        esac
        shift
    done
}

# Main script logic
case "$1" in
    cpu)
        get_cpu_info
        ;;
    memory)
        get_memory_info
        ;;
    user)
        case "$2" in
            create)
                create_user "$3"
                ;;
            list)
                list_users "$3"
                ;;
            *)
                echo "Error: Invalid user command."
                exit 1
                ;;
        esac
        ;;
    file)
        case "$2" in
            getinfo)
                shift
                get_file_info "$@"
                ;;
            *)
                shift
                get_specific_file_info "$@"
                ;;
        esac
        ;;
    *)
        echo "Error: Invalid command."
        exit 1
        ;;
esac
```
